{"version":3,"sources":["components/Todo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Title","InputWrapper","Input","input","BtnAdd","button","TodoList","ul","TodoContent","span","TodoItem","li","props","isDone","css","BtnDelete","TodoComponent","useState","content","setContent","id","text","todoList","setTodoList","nextId","setNextId","onChange","e","console","log","target","value","placeholder","onClick","map","type","checked","newArray","todo","handleToggle","filter","deleteList","App","Todo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAwDMA,EAAYC,IAAOC,IAAV,8GAMTC,EAAQF,IAAOC,IAAV,gKAQLE,EAAeH,IAAOC,IAAV,0IAQZG,EAAQJ,IAAOK,MAAV,6HASLC,EAASN,IAAOO,OAAV,yHASNC,EAAWR,IAAOS,GAAV,mFAKRC,EAAcV,IAAOW,KAAV,kDAGXC,EAAWZ,IAAOa,GAAV,oNAQVH,GACmB,SAACI,GAAD,OAAWA,EAAMC,QAAU,kBAG9C,qBAAGA,QAEHC,YADM,4IAIFN,MAKFO,EAAYjB,IAAOO,OAAV,+EAMAW,EAhIO,WACpB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,CACvC,CAAEG,GAAI,EAAGC,KAAM,eAAMR,QAAQ,GAC7B,CAAEO,GAAI,EAAGC,KAAM,eAAMR,QAAQ,KAF/B,mBAAOS,EAAP,KAAiBC,EAAjB,KAIA,EAA4BN,mBAAS,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KAsBA,OACE,mCACE,eAAC5B,EAAD,WACE,cAACG,EAAD,wCACA,eAACC,EAAD,WACE,cAACC,EAAD,CAAOwB,SAzBM,SAACC,GACpBC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBZ,EAAWQ,EAAEG,OAAOC,QAuBiBC,YAAY,wDAC3C,cAAC5B,EAAD,CAAQ6B,QAtBA,WACdR,EAAUD,EAAS,GACnBD,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAAEF,GAAII,EAAQH,KAAMH,EAASL,QAAQ,MAC/De,QAAQC,IAAIP,IAmBN,6BAEF,cAAChB,EAAD,UACGgB,EAASY,KAAI,gBAAGd,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMR,EAAb,EAAaA,OAAb,OACZ,eAACH,EAAD,CAAmBG,OAAQA,EAA3B,UACE,kCACE,uBAAOsB,KAAK,WAAWT,SAAU,SAACC,GAAD,OApB1B,SAACA,EAAGP,GACvB,IAAMP,EAASc,EAAEG,OAAOM,QAClBC,EAAWf,EAASY,KAAI,SAACI,GAC7B,OAAOA,EAAKlB,KAAOA,EAAZ,2BAAsBkB,GAAtB,IAA4BzB,OAAQA,IAAWyB,KAExDf,EAAYc,GAewCE,CAAaZ,EAAGP,MACxD,cAACZ,EAAD,UAAca,OAEhB,cAACN,EAAD,CAAWkB,QAAS,kBA1Bb,SAACb,GAClBG,EAAYD,EAASkB,QAAO,SAACb,GAAD,OAAOA,EAAEP,KAAOA,MAyBRqB,CAAWrB,IAArC,4BALaA,cCLZsB,MAtBf,WAEE,OACE,mCAcE,cAACC,EAAD,OCpBSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e2a814c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { useState } from \"react\";\r\n\r\nconst TodoComponent = () => {\r\n  const [content, setContent] = useState(\"\");\r\n  const [todoList, setTodoList] = useState([\r\n    { id: 1, text: \"할일\", isDone: false },\r\n    { id: 2, text: \"할일\", isDone: false },\r\n  ]);\r\n  const [nextId, setNextId] = useState(3);\r\n\r\n  const changedValue = (e) => {\r\n    console.log(e.target.value);\r\n    setContent(e.target.value);\r\n  };\r\n  const addList = () => {\r\n    setNextId(nextId + 1);\r\n    setTodoList([...todoList, { id: nextId, text: content, isDone: false }]);\r\n    console.log(todoList);\r\n  };\r\n  const deleteList = (id) => {\r\n    setTodoList(todoList.filter((e) => e.id !== id));\r\n  };\r\n  const handleToggle = (e, id) => {\r\n    const isDone = e.target.checked;\r\n    const newArray = todoList.map((todo) => {\r\n      return todo.id === id ? { ...todo, isDone: isDone } : todo;\r\n    });\r\n    setTodoList(newArray);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Title>일정 관리</Title>\r\n        <InputWrapper>\r\n          <Input onChange={changedValue} placeholder=\"할 일을 입력하세요.\" />\r\n          <BtnAdd onClick={addList}>등록</BtnAdd>\r\n        </InputWrapper>\r\n        <TodoList>\r\n          {todoList.map(({ id, text, isDone }) => (\r\n            <TodoItem key={id} isDone={isDone}>\r\n              <label>\r\n                <input type=\"checkbox\" onChange={(e) => handleToggle(e, id)} />\r\n                <TodoContent>{text}</TodoContent>\r\n              </label>\r\n              <BtnDelete onClick={() => deleteList(id)}>삭제</BtnDelete>\r\n            </TodoItem>\r\n          ))}\r\n        </TodoList>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Container = styled.div`\r\n  border: 1px solid black;\r\n  width: 500px;\r\n  height: 500px;\r\n  overflow: auto;\r\n`;\r\nconst Title = styled.div`\r\n  background: #00ffffb0;\r\n  height: 50px;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: bolder;\r\n  padding-top: 20px;\r\n`;\r\nconst InputWrapper = styled.div`\r\n  margin: 0;\r\n  width: 100%;\r\n  height: 30px;\r\n  display: flex;\r\n  position: relative;\r\n  background: black;\r\n`;\r\nconst Input = styled.input`\r\n  width: 430px;\r\n  background: black;\r\n  border: black;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\nconst BtnAdd = styled.button`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 3px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst TodoList = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n  padding-left: 0;\r\n`;\r\nconst TodoContent = styled.span`\r\n  font-weight: bold;\r\n`;\r\nconst TodoItem = styled.li`\r\n  border-bottom: 1px solid black;\r\n  width: 100%;\r\n  height: 30px;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${TodoContent} {\r\n    text-decoration: ${(props) => props.isDone && \"line-through\"};\r\n  }\r\n\r\n  ${({ isDone }) =>\r\n    isDone &&\r\n    css`\r\n      background: black;\r\n      color: white;\r\n      ${TodoContent} {\r\n        text-decoration: line-through;\r\n      }\r\n    `}\r\n`;\r\nconst BtnDelete = styled.button`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 3px;\r\n`;\r\n\r\nexport default TodoComponent;\r\n","// import Counter from \"./components/Counter\";\n// import EventPractice from \"./components/EventPractice\";\n// import Average from \"./components/Average\";\n// import IterationSample from \"./components/IterationSample\";\n// import Test2 from \"./components/Test2\";\n// import BendingMachine from \"./components/BendingMachine\";\n// import Sort from \"./components/Sort\";\n// import Counters2 from \"./components/Counters2\";\n// import Info from \"./components/Info\";\n// import { useState } from \"react\";\n\nimport TodoComponent from \"./components/Todo\";\n\n// import StyledComponents from \"./components/StyledComponents\";\n\nfunction App() {\n  // const [visible, setVisible] = useState(false);\n  return (\n    <>\n      {/* <Counter /> */}\n      {/* <Counter name=\"first\">버튼만들기</Counter> */}\n      {/* <Say2 /> */}\n      {/* <EventPractice /> */}\n      {/* <Test2 /> */}\n      {/* <IterationSample /> */}\n      {/* <BendingMachine /> */}\n      {/* <Sort /> */}\n      {/* <Counters2 /> */}\n      {/* <button onClick={() => setVisible(!visible)}>{visible ? \"숨기기\" : \"보이기\"}</button>\n      {visible && <Info />} */}\n      {/* <Average /> */}\n      {/* <StyledComponents /> */}\n      <TodoComponent />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}